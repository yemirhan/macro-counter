// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator kysely {
    provider = "prisma-kysely"

    // Optionally provide a destination directory for the generated file
    // and a filename of your choice
    output       = "../src/server"
    fileName     = "db.types.ts"
    // Optionally generate runtime enums to a separate file
    enumFileName = "enums.ts"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    entries       Entry[]
    foods         Food[]
    ingredients   Ingredient[]
    recipe        Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Entry {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    entryDate DateTime

    user   User             @relation(fields: [userId], references: [id])
    userId String
    foods  FoodsOfEntries[]

    @@index([name])
}

model Food {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    carbs    Int? @default(0)
    protein  Int? @default(0)
    fat      Int? @default(0)
    calories Int? @default(0)

    user        User             @relation(fields: [userId], references: [id])
    userId      String
    ingredients FoodIngredient[]
    entries     FoodsOfEntries[]

    recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId Int?

    @@index([name])
}

model Recipe {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy User   @relation(fields: [creatorId], references: [id])
    creatorId String
    food      Food[]

    @@index([name])
}

model Ingredient {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    carbs    Int @default(0)
    protein  Int @default(0)
    fat      Int @default(0)
    calories Int @default(0)

    createdBy User?   @relation(fields: [creatorId], references: [id])
    creatorId String?

    food FoodIngredient[]

    @@index([name])
}

model FoodIngredient {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    food   Food @relation(fields: [foodId], references: [id])
    foodId Int

    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    ingredientId Int

    @@id([foodId, ingredientId])
    @@index([foodId])
    @@index([ingredientId])
}

model FoodsOfEntries {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    food   Food @relation(fields: [foodId], references: [id])
    foodId Int

    entry   Entry @relation(fields: [entryId], references: [id])
    entryId Int

    @@id([foodId, entryId])
    @@index([foodId])
    @@index([entryId])
}
